#include <QMainWindow> 
#include <QTableWidget> 
#include <QLineEdit>        
#include <QPushButton>      
#include <QLabel>
#include <QSlider>

QT_BEGIN_NAMESPACE // Begin Qt namespace scope
namespace Ui { class MainWindow; } // Forward declaration of Ui::MainWindow class
QT_END_NAMESPACE // End Qt namespace scope

// Define MainWindow class inheriting from QMainWindow (main application window)
class MainWindow : public QMainWindow {
    Q_OBJECT // Enable Qt's meta-object features such as signals and slots

public:
    MainWindow(QWidget *parent = nullptr); // Constructor, optionally takes a parent widget
    ~MainWindow(); // Destructor

private slots: // Qt slots: functions responding to signals/events
    void onComputeLCS(); // Slot to compute Longest Common Subsequence (LCS)
    void onLoadFromFile(); // Slot to load input strings from a file
    void onSaveToFile(); // Slot to save results to a file
    void animateStep(); // Slot to animate one step of DP computation
    void onReset(); // Slot to reset the UI and internal data

private:
    Ui::MainWindow *ui; // Pointer to UI components generated by Qt Designer
    QLineEdit *inputX, *inputY; // Input fields for the two strings (X and Y)
    QPushButton *computeButton, *loadButton, *saveButton;  // Buttons for compute, load, and save
    QTableWidget *dpTable; // Table widget to display DP matrix
    QLabel *lcsLabel; // Label to show the final LCS result
    QPushButton *resetButton; // Button to reset the UI and data
    QSlider *animationSpeedSlider;  // New slider for animation speed control
    QLabel *speedLabel;  // Label to show current animation speed
    QLabel *sequenceXLabel;  // Label to show sequence X
    QLabel *sequenceYLabel;  // Label to show sequence Y

    std::vector<std::vector<int>> dpMatrix; // 2D vector to store DP values (lengths of LCS)
    std::vector<std::vector<char>> directionMatrix;  // 2D vector to store directions (backtracking info)
    int currentRow = 0; // Current row in DP table for animation step
    int currentCol = 0; // Current column in DP table for animation step
    int animationDelay = 50;  // Default animation delay in milliseconds

    void visualizeDP(const std::vector<std::vector<int>> &dp, const std::vector<std::vector<char>> &dir);  
    // Helper function to visualize DP matrix and directions on the UI
    void updateAnimationSpeed(int value);  // New method to handle animation speed changes
    void highlightCurrentCell(int row, int col);  // New method to highlight current cell
    void updateSequenceLabels();  // New method to update sequence labels
};